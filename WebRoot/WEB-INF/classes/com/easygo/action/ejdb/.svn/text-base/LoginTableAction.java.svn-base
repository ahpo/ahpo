package com.easygo.action.ejdb;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.easygo.service.ejdb.LoginService;
import com.easygo.vo.ejdb.Login;
import com.easygo.vo.ejdb.LoginExample;
import com.enjoyor.util.MD5.KeyedDigestMD5;
import com.enjoyor.util.date.DateUtil;
import com.enjoyor.util.logger.Logger;
import com.enjoyor.util.logger.LoggerFactory;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.pub.util.config.Config;
import com.pub.util.constant.Constants;
import com.pub.util.interceptor.SysOperLogAnnotation;
import com.pub.webapp.ui.pagination.Page;
import com.pub.webapp.ui.pagination.PageHandle;
import com.pub.webapp.ui.util.OperateResult;
import com.pub.webapp.ui.util.WebConstants;
import com.sys.service.SysRoleService;
import com.sys.service.SysUserService;
import com.sys.vo.SysFunction;

@Controller("userAction")
@Scope("prototype")
public class LoginTableAction extends ActionSupport {

	private static final long serialVersionUID = 1L;
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	private Integer id;
	private String username;
	private String othername;
	private String password;
	private String randomcode;
	private String idcard;
	private String address;
	private String tel;
	private String mobile;
	private Integer usertype;
	private Integer hittimes;
	private String lastlogintime;
	private Date updatadate;
	private String person;
	private String back;
	private String oldpassword;
	private List<SysFunction> funcList;

	@Resource
	private LoginService loginService;

	private Integer ids[];
	private List<?> resultList;
	private OperateResult operateResult = new OperateResult();

	private PageHandle pageHandler;
	private Page page;
	private String currentPage;
	private String pageMethod = "";

	@Resource
	private SysUserService sysUserService;
	@Resource
	private SysRoleService sysRoleService;

	public void setSysUserService(SysUserService sysUserService) {
		this.sysUserService = sysUserService;
	}

	public void setSysRoleService(SysRoleService sysRoleService) {
		this.sysRoleService = sysRoleService;
	}

	public void setLoginService(LoginService loginService) {
		this.loginService = loginService;
	}

	public String userQuery() {
		String resCode = Config.params.getString("query.userQuery",
				"login_user");
		Map<String, Object> session = ActionContext.getContext().getSession();

		String resType = (String) session.get(Constants.RES_TYPE);
		Integer urid;
		if (Constants.RES_TYPE_USER.equals(resType)) {
			urid = (Integer) session.get(Constants.UID);
			funcList = sysUserService.selectFuncByUidAndResCode(urid, resCode);
		} else {
			urid = (Integer) session.get(Constants.RID);
			funcList = sysRoleService.selectFuncByRidAndResCode(urid, resCode);
		}
		if (funcList == null || funcList.isEmpty()) {
			return LOGIN;
		}
		int totalRows = loginService.countByExample(null);
		pageHandler = new PageHandle();
		page = pageHandler.getPage(null, currentPage, pageMethod, totalRows);
		resultList = loginService.selectPageByExample(null, page.getStartRow(),
				page.getPageSize());
		return SUCCESS;
	}

	public String userToUpdate() {
		Login record = loginService.selectByPrimaryKey(id);
		this.username = record.getUsername();
		this.othername = record.getOthername();
		this.address = record.getAddress();
		this.randomcode = record.getRandomcode();
		this.idcard = record.getIdcard();
		this.tel = record.getTel();
		this.mobile = record.getMobile();
		this.usertype = record.getUsertype();
		this.hittimes = record.getHittimes();
		this.lastlogintime = record.getLastlogintime();
		this.back = record.getBack();
		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "修改登录用户信息")
	public String userUpdate() {
		operateResult.setOperation(WebConstants.USER_UPDATE);
		operateResult.setUrl("userQuery.action");
		Login record = loginService.selectByPrimaryKey(id);
		record.setUsername(username);
		if ("".equals(othername.trim())) {
			othername = null;
		}
		record.setOthername(othername);
		record.setRandomcode(randomcode);
		if ("".equals(address.trim())) {
			address = null;
		}
		record.setAddress(address);
		if ("".equals(idcard.trim())) {
			idcard = null;
		}
		record.setIdcard(idcard);
		if ("".equals(tel.trim())) {
			tel = null;
		}
		record.setTel(tel);
		if ("".equals(mobile.trim())) {
			mobile = null;
		}
		record.setMobile(mobile);
		record.setUsertype(usertype);
		record.setHittimes(hittimes);
		record.setLastlogintime(lastlogintime);
		record.setUpdatadate(new Date());
		if ("".equals(back.trim())) {
			back = null;
		}
		record.setBack(back);

		if (username != null && !"".equals(username)) {
			LoginExample example = new LoginExample();
			example.createCriteria().andUsernameEqualTo(username);
			if (!loginService.checkSimilarity(example, id, 0)) { // 验证用户名是否已存在
				logger.info("cannot update, the inputed username is already used");
				operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
				operateResult
						.setReason(WebConstants.OPERATERESULT_REASON_USER_UPDATE);
				return ERROR;
			}
			int rtn = 0;
			rtn = loginService.updateByPrimaryKey(record);
			if (rtn != 1) {
				logger.info("cannot update, something is wrong");
				operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
				operateResult
						.setReason(WebConstants.OPERATERESULT_REASON_USER_UPDATE);
				return ERROR;
			}
		} else {
			logger.info("can't update,for username is empty");
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult
					.setReason(WebConstants.OPERATERESULT_REASON_USER_UPDATE);
			return ERROR;
		}
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
		return SUCCESS;
	}

	public String userToCreate() {
		return SUCCESS;
	}

	public String userToUpdatePwd() {
		Login record = loginService.selectByPrimaryKey(id);
		this.username = record.getUsername();
		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "修改登录用户密码")
	public String userUpdatePwd() {
		operateResult.setOperation(WebConstants.USER_UPDATE);
		operateResult.setUrl("userQuery.action");
		Login record = loginService.selectByPrimaryKey(id);
		String oldP = KeyedDigestMD5.getKeyedDigest(oldpassword, "");
		if (oldP == null || !oldP.equals(record.getPassword())) {
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult.setReason("原密码输入错误");
			return SUCCESS;
		}
		record.setPassword(KeyedDigestMD5.getKeyedDigest(password, ""));
		record.setUpdatadate(new Date());
		loginService.updateByPrimaryKey(record);
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "创建登录用户信息")
	public String userCreate() {
		operateResult.setOperation(WebConstants.USER_CREATE);
		operateResult.setUrl("userQuery.action");
		Login record = new Login();
		record.setUsername(username);
		if ("".equals(othername.trim())) {
			othername = null;
		}
		record.setOthername(othername);
		record.setPassword(KeyedDigestMD5.getKeyedDigest(password, ""));
		record.setRandomcode(randomcode);
		if ("".equals(address.trim())) {
			address = null;
		}
		record.setAddress(address);
		if ("".equals(idcard.trim())) {
			idcard = null;
		}
		record.setIdcard(idcard);
		if ("".equals(tel.trim())) {
			tel = null;
		}
		record.setTel(tel);
		if ("".equals(mobile.trim())) {
			mobile = null;
		}
		record.setMobile(mobile);
		record.setUsertype(usertype);
		record.setHittimes(hittimes);
		record.setLastlogintime(DateUtil.format(new Date(), "yyyyMMddHHmm"));
		record.setUpdatadate(new Date());
		person = (String) ActionContext.getContext().getSession()
				.get(Constants.USER_NAME);
		record.setPerson(person);
		if ("".equals(back.trim())) {
			back = null;
		}
		record.setBack(back);

		if (username != null && !"".equals(username) && password != null
				&& !"".equals(password)) {
			LoginExample example = new LoginExample();
			example.createCriteria().andUsernameEqualTo(username);
			if (!loginService.checkSimilarity(example, id, 1)) {
				logger.info("cannot create, the inputed username is already used");
				operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
				operateResult
						.setReason(WebConstants.OPERATERESULT_REASON_USER_CREATE);
				return ERROR;
			}
			int rtn = 0;
			rtn = loginService.insertSelective(record);
			if (rtn != 1) {
				logger.info("cannot create, something is wrong");
				operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
				operateResult
						.setReason(WebConstants.OPERATERESULT_REASON_USER_CREATE);
				return ERROR;
			}
		} else {
			logger.info("can't create, for username or password is empty");
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult
					.setReason(WebConstants.OPERATERESULT_REASON_USER_CREATE);
			return ERROR;
		}
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "删除登录用户信息")
	public String userDelete() {
		operateResult.setOperation(WebConstants.USER_DELETE);
		operateResult.setUrl("userQuery.action");
		for (int i = 0; i < ids.length; i++) {
			loginService.deleteByPrimaryKey(ids[i]);
			logger.info("login record[" + ids[i] + "] is deleted");
		}
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
		return SUCCESS;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getOthername() {
		return othername;
	}

	public void setOthername(String othername) {
		this.othername = othername;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getRandomcode() {
		return randomcode;
	}

	public void setRandomcode(String randomcode) {
		this.randomcode = randomcode;
	}

	public String getIdcard() {
		return idcard;
	}

	public void setIdcard(String idcard) {
		this.idcard = idcard;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getTel() {
		return tel;
	}

	public void setTel(String tel) {
		this.tel = tel;
	}

	public String getMobile() {
		return mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}

	public Integer getUsertype() {
		return usertype;
	}

	public void setUsertype(Integer usertype) {
		this.usertype = usertype;
	}

	public Date getUpdatadate() {
		return updatadate;
	}

	public void setUpdatadate(Date updatadate) {
		this.updatadate = updatadate;
	}

	public String getBack() {
		return back;
	}

	public void setBack(String back) {
		this.back = back;
	}

	public Integer[] getIds() {
		return ids;
	}

	public void setIds(Integer[] ids) {
		this.ids = ids;
	}

	public List<?> getResultList() {
		return resultList;
	}

	public void setResultList(List<?> resultList) {
		this.resultList = resultList;
	}

	public OperateResult getOperateResult() {
		return operateResult;
	}

	public void setOperateResult(OperateResult operateResult) {
		this.operateResult = operateResult;
	}

	public PageHandle getPageHandler() {
		return pageHandler;
	}

	public void setPageHandler(PageHandle pageHandler) {
		this.pageHandler = pageHandler;
	}

	public Page getPage() {
		return page;
	}

	public void setPage(Page page) {
		this.page = page;
	}

	public String getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(String currentPage) {
		this.currentPage = currentPage;
	}

	public String getPageMethod() {
		return pageMethod;
	}

	public void setPageMethod(String pageMethod) {
		this.pageMethod = pageMethod;
	}

	public String getPerson() {
		return person;
	}

	public void setPerson(String person) {
		this.person = person;
	}

	public List<SysFunction> getFuncList() {
		return funcList;
	}

	public void setFuncList(List<SysFunction> funcList) {
		this.funcList = funcList;
	}

	public String getOldpassword() {
		return oldpassword;
	}

	public void setOldpassword(String oldpassword) {
		this.oldpassword = oldpassword;
	}

	public Integer getHittimes() {
		return hittimes;
	}

	public void setHittimes(Integer hittimes) {
		this.hittimes = hittimes;
	}

	public String getLastlogintime() {
		return lastlogintime;
	}

	public void setLastlogintime(String lastlogintime) {
		this.lastlogintime = lastlogintime;
	}
}