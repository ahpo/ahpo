package com.easygo.action.ejdb;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.easygo.service.ejdb.CityService;
import com.easygo.service.ejdb.RoadReportService;
import com.easygo.vo.ejdb.RoadReportWithBLOBs;
import com.enjoyor.util.logger.Logger;
import com.enjoyor.util.logger.LoggerFactory;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.pub.util.constant.Constants;
import com.pub.util.interceptor.SysOperLogAnnotation;
import com.pub.webapp.ui.pagination.Page;
import com.pub.webapp.ui.pagination.PageHandle;
import com.pub.webapp.ui.util.OperateResult;
import com.pub.webapp.ui.util.WebConstants;
import com.sys.service.SysRoleService;
import com.sys.service.SysUserService;
import com.sys.vo.SysFunction;

@Controller
@Scope("prototype")
public class RoadReportAction extends ActionSupport {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1664330978340996419L;
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	private Integer id;
	private String title;
	private String contxt;
	private String citycode;
	private String imgurl;
	private String nowday;
	private Integer infotype;
	private Integer upstatus;
	private String back;
	private String person;
	private Date updatadate;
	private List<SysFunction> funcList;
	private RoadReportWithBLOBs roadReport;

	private Integer ids[];
	private List<?> resultList;
	private OperateResult operateResult = new OperateResult();

	/*
	 * 分页使用
	 */
	private PageHandle pageHandler;
	private Page page;
	private String pageMethod = "";
	private String currentPage;

	@Resource
	private RoadReportService roadReportService;
	@Resource
	private SysUserService sysUserService;
	@Resource
	private SysRoleService sysRoleService;
	@Resource
	private CityService cityService;

	public void setCityService(CityService cityService) {
		this.cityService = cityService;
	}

	public void setSysUserService(SysUserService sysUserService) {
		this.sysUserService = sysUserService;
	}

	public void setSysRoleService(SysRoleService sysRoleService) {
		this.sysRoleService = sysRoleService;
	}

	public void setRoadReportService(RoadReportService roadReportService) {
		this.roadReportService = roadReportService;
	}

	public String roadReportQuery() {
		String resCode = Constants.QUERY_ROADREPORT_QUERY;
		Map<String, Object> session = ActionContext.getContext().getSession();

		String resType = (String) session.get(Constants.RES_TYPE);
		Integer urid;
		if (Constants.RES_TYPE_USER.equals(resType)) {
			urid = (Integer) session.get(Constants.UID);
			funcList = sysUserService.selectFuncByUidAndResCode(urid, resCode);
		} else {
			urid = (Integer) session.get(Constants.RID);
			funcList = sysRoleService.selectFuncByRidAndResCode(urid, resCode);
		}
		if (funcList == null || funcList.isEmpty()) {
			return LOGIN;
		}
		int total = roadReportService.countByExample(null);
		pageHandler = new PageHandle();
		page = pageHandler.getPage(null, currentPage, pageMethod, total);
		resultList = roadReportService.selectPageByExampleWithBLOBs(null,
				page.getStartRow(), page.getPageSize()); 
		return SUCCESS;
	}

	public String roadReportToUpdate() {
		roadReport = roadReportService.selectByPrimaryKey(id);
		if (roadReport == null) {
			logger.info("you can't update a null roadReport object");
			return ERROR;
		}
		this.title = roadReport.getTitle();
		this.contxt = roadReport.getContxt();
		this.citycode = roadReport.getCitycode();
		this.imgurl = roadReport.getImgurl();
		this.nowday = roadReport.getNowday();
		this.infotype = roadReport.getInfotype();
		this.upstatus = roadReport.getUpstatus();
		this.updatadate = roadReport.getUpdatadate();
		this.back = roadReport.getBack();
		resultList = cityService.selectByExample(null);

		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "修改路况信息")
	public String roadReportUpdate() {
		Map<String, String> parms = new HashMap<String, String>();
		parms.put("currentPage", currentPage);
		operateResult.setParms(parms);
		RoadReportWithBLOBs rp = roadReportService.selectByPrimaryKey(id);
		rp.setTitle(title);
		rp.setContxt(contxt);
		rp.setCitycode(citycode);
		rp.setImgurl(imgurl);
		rp.setInfotype(infotype);
		rp.setUpstatus(upstatus);
		rp.setNowday(nowday);
		rp.setUpdatadate(new Date());
		rp.setBack(back);
		int rtn = roadReportService.updateByPrimaryKeyWithBLOBs(rp);
		operateResult.setOperation(WebConstants.ROADREPORT_UPDATE);
		operateResult.setUrl("roadReportQuery.action");
		if (rtn == 1) {
			operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
			return SUCCESS;
		} else {
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult
					.setReason(WebConstants.OPERATERESULT_REASON_ROADREPORT_UPDATE);
			return ERROR;
		}
	}

	public String roadReportToCreate() {
		resultList = cityService.selectByExample(null);
		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "创建路况信息")
	public String roadReportCreate() {
		operateResult.setOperation(WebConstants.ROADREPORT_CREATE);
		operateResult.setUrl("roadReportQuery.action");
		RoadReportWithBLOBs record = new RoadReportWithBLOBs();
		record.setTitle(title);
		record.setContxt(contxt);
		record.setCitycode(citycode);
		record.setInfotype(infotype);
		record.setUpstatus(upstatus);
		record.setImgurl(imgurl);
		record.setNowday(nowday);
		record.setUpdatadate(new Date());
		person = (String) ActionContext.getContext().getSession()
				.get(Constants.USER_NAME);
		record.setPerson(person);
		record.setBack(back);
		int rtn = roadReportService.insertSelective(record);
		if (rtn == 1) {
			operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
			return SUCCESS;
		} else {
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult
					.setReason(WebConstants.OPERATERESULT_REASON_ROADREPORT_CREATE);
			return ERROR;
		}
	}

	@SysOperLogAnnotation(value = "删除路况信息")
	public String roadReportDelete() {
		operateResult.setOperation(WebConstants.ROADREPORT_DELETE);
		operateResult.setUrl("roadReportQuery.action");
		for (int i = 0; i < ids.length; i++) {
			roadReportService.deleteByPrimaryKey(ids[i]);
			logger.info("roadReport[" + ids[i] + "] is deleted");
		}
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
		return SUCCESS;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getContxt() {
		return contxt;
	}

	public void setContxt(String contxt) {
		this.contxt = contxt;
	}

	public String getImgurl() {
		return imgurl;
	}

	public void setImgurl(String imgurl) {
		this.imgurl = imgurl;
	}

	public String getNowday() {
		return nowday;
	}

	public void setNowday(String nowday) {
		this.nowday = nowday;
	}

	public Integer getInfotype() {
		return infotype;
	}

	public void setInfotype(Integer infotype) {
		this.infotype = infotype;
	}

	public Integer getUpstatus() {
		return upstatus;
	}

	public void setUpstatus(Integer upstatus) {
		this.upstatus = upstatus;
	}

	public String getBack() {
		return back;
	}

	public void setBack(String back) {
		this.back = back;
	}

	public List<?> getResultList() {
		return resultList;
	}

	public void setResultList(List<?> list) {
		this.resultList = list;
	}

	public PageHandle getPageHandler() {
		return pageHandler;
	}

	public void setPageHandler(PageHandle pageHandler) {
		this.pageHandler = pageHandler;
	}

	public Page getPage() {
		return page;
	}

	public void setPage(Page page) {
		this.page = page;
	}

	public String getPageMethod() {
		return pageMethod;
	}

	public void setPageMethod(String pageMethod) {
		this.pageMethod = pageMethod;
	}

	public String getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(String currentPage) {
		this.currentPage = currentPage;
	}

	public OperateResult getOperateResult() {
		return operateResult;
	}

	public void setOperateResult(OperateResult operateResult) {
		this.operateResult = operateResult;
	}

	public Integer[] getIds() {
		return ids;
	}

	public void setIds(Integer[] ids) {
		this.ids = ids;
	}

	public String getPerson() {
		return person;
	}

	public void setPerson(String person) {
		this.person = person;
	}

	public Date getUpdatadate() {
		return updatadate;
	}

	public void setUpdatadate(Date updatadate) {
		this.updatadate = updatadate;
	}

	public List<SysFunction> getFuncList() {
		return funcList;
	}

	public void setFuncList(List<SysFunction> funcList) {
		this.funcList = funcList;
	}

	public void setCitycode(String citycode) {
		this.citycode = citycode;
	}

	public String getCitycode() {
		return citycode;
	}

	public RoadReportWithBLOBs getRoadReport() {
		return roadReport;
	}

	public void setRoadReport(RoadReportWithBLOBs roadReport) {
		this.roadReport = roadReport;
	}
}
