package com.easygo.action.ejdb;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.easygo.service.ejdb.CityService;
import com.easygo.service.ejdb.SoftVersionService;
import com.easygo.vo.ejdb.SoftVersion;
import com.easygo.vo.ejdb.SoftVersionExample;
import com.enjoyor.util.logger.Logger;
import com.enjoyor.util.logger.LoggerFactory;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.pub.util.config.Des;
import com.pub.util.constant.Constants;
import com.pub.util.interceptor.SysOperLogAnnotation;
import com.pub.webapp.ui.pagination.Page;
import com.pub.webapp.ui.pagination.PageHandle;
import com.pub.webapp.ui.util.OperateResult;
import com.pub.webapp.ui.util.WebConstants;
import com.sys.service.SysRoleService;
import com.sys.service.SysUserService;
import com.sys.vo.SysFunction;

@Controller
@Scope("prototype")
public class SoftVersionAction extends ActionSupport {

	private static final long serialVersionUID = 1L;
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	private Integer id;
	private String softversion;
	private String softupdatacontxt;
	private Integer used;
	private String softurl;
	private String citycode;
	private String person;
	private String back;
	private Date updatadate;
	private List<SysFunction> funcList;
	private SoftVersion softVersionRecord;

	private Integer ids[];
	private List<?> resultList;
	private OperateResult operateResult = new OperateResult();

	private PageHandle pageHandler;
	private Page page;
	private String pageMethod = "";
	private String currentPage;

	@Resource
	private SoftVersionService softVersionService;
	@Resource
	private SysUserService sysUserService;
	@Resource
	private SysRoleService sysRoleService;
	@Resource
	private CityService cityService;

	public void setCityService(CityService cityService) {
		this.cityService = cityService;
	}

	public void setSysUserService(SysUserService sysUserService) {
		this.sysUserService = sysUserService;
	}

	public void setSysRoleService(SysRoleService sysRoleService) {
		this.sysRoleService = sysRoleService;
	}

	public void setSoftVersionService(SoftVersionService softVersionService) {
		this.softVersionService = softVersionService;
	}

	public String softVersionQuery() {
		String resCode = Constants.QUERY_SOFTVERSION_QUERY;
		Map<String, Object> session = ActionContext.getContext().getSession();

		String resType = (String) session.get(Constants.RES_TYPE);
		Integer urid;
		if (Constants.RES_TYPE_USER.equals(resType)) {
			urid = (Integer) session.get(Constants.UID);
			funcList = sysUserService.selectFuncByUidAndResCode(urid, resCode);
		} else {
			urid = (Integer) session.get(Constants.RID);
			funcList = sysRoleService.selectFuncByRidAndResCode(urid, resCode);
		}
		if (funcList == null || funcList.isEmpty()) {
			return LOGIN;
		}
		int total = softVersionService.countByExample(null);
		pageHandler = new PageHandle();
		page = pageHandler.getPage(null, currentPage, pageMethod, total);
		resultList = softVersionService.selectPageByExampleWithBLOBs(null,
				page.getStartRow(), page.getPageSize());
		return SUCCESS;
	}

	public String softVersionToUpdate() {
		softVersionRecord = softVersionService.selectByPrimaryKey(id);
		this.softversion = softVersionRecord.getSoftversion();
		this.softupdatacontxt = softVersionRecord.getSoftupdatacontxt();
		this.softurl = Des.decrypt(softVersionRecord.getSofturl());
		this.used = softVersionRecord.getUsed();
		this.back = softVersionRecord.getBack();
		resultList = cityService.selectByExample(null);
		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "修改软件版本信息")
	public String softVersionUpdate() {
		Map<String, String> parms = new HashMap<String, String>();
		parms.put("currentPage", currentPage);
		operateResult.setParms(parms);
		operateResult.setOperation("修改软件更新列表");
		operateResult.setUrl("softVersionQuery.action");
		SoftVersion record = softVersionService.selectByPrimaryKey(id);
		record.setSoftversion(softversion);
		if ("".equals(softupdatacontxt.trim())) {
			softupdatacontxt = null;
		}
		if ("".equals(softurl.trim())) {
			softurl = null;
		}
		if ("".equals(back)) {
			back = null;
		}
		record.setSoftupdatacontxt(softupdatacontxt);
		record.setSofturl(Des.encrypt(softurl));
		record.setCitycode(citycode);
		record.setUsed(used);
		record.setUpdatadate(new Date());
		record.setBack(back);

		SoftVersionExample example = new SoftVersionExample();
		example.createCriteria().andSoftversionEqualTo(softversion);
		if (!softVersionService.checkSimilarity(example, id, 0)) {
			logger.info("cannot update, for the inputed softversion is already exist");
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult.setReason("输入信息有误或数据已存在");
			return ERROR;
		}

		softVersionService.updateByPrimaryKeyWithBLOBs(record);
		logger.info("softversion[" + id + "] is updated successfully");
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
		return SUCCESS;
	}

	public String softVersionToCreate() {
		resultList = cityService.selectByExample(null);
		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "创建软件版本信息")
	public String softVersionCreate() {
		operateResult.setOperation("创建软件更新版本");
		operateResult.setUrl("softVersionQuery.action");
		SoftVersion record = new SoftVersion();
		record.setSoftversion(softversion);
		if ("".equals(softupdatacontxt.trim())) {
			softupdatacontxt = null;
		}
		if ("".equals(softurl.trim())) {
			softurl = null;
		}
		if ("".equals(back)) {
			back = null;
		}
		record.setSoftupdatacontxt(softupdatacontxt);
		record.setSofturl(Des.encrypt(softurl));
		record.setCitycode(citycode);
		record.setUsed(used);
		record.setUpdatadate(new Date());
		record.setBack(back);
		person = (String) ActionContext.getContext().getSession()
				.get(Constants.USER_NAME);
		record.setPerson(person);
		SoftVersionExample example = new SoftVersionExample();
		example.createCriteria().andSoftversionEqualTo(softversion);
		if (!softVersionService.checkSimilarity(example, id, 1)) {
			logger.info("cannot create, for the inputed softversion is already exist");
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult.setReason("输入信息有误或数据已存在");
			return ERROR;
		}

		softVersionService.insertSelective(record);
		logger.info("softversion is created successfully");
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);

		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "删除软件版本信息")
	public String softVersionDelete() {
		operateResult.setOperation("删除软件更新版本");
		operateResult.setUrl("softVersionQuery.action");
		for (int i = 0; i < ids.length; i++) {
			softVersionService.deleteByPrimaryKey(ids[i]);
			logger.info("softversion[" + ids[i] + "] is deleted");
		}
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
		return SUCCESS;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getSoftversion() {
		return softversion;
	}

	public void setSoftversion(String softversion) {
		this.softversion = softversion;
	}

	public String getSoftupdatacontxt() {
		return softupdatacontxt;
	}

	public void setSoftupdatacontxt(String softupdatacontxt) {
		this.softupdatacontxt = softupdatacontxt;
	}

	public Integer getUsed() {
		return used;
	}

	public void setUsed(Integer used) {
		this.used = used;
	}

	public String getSofturl() {
		return softurl;
	}

	public void setSofturl(String softurl) {
		this.softurl = softurl;
	}

	public String getPerson() {
		return person;
	}

	public void setPerson(String person) {
		this.person = person;
	}

	public String getBack() {
		return back;
	}

	public void setBack(String back) {
		this.back = back;
	}

	public Date getUpdatadate() {
		return updatadate;
	}

	public void setUpdatadate(Date updatadate) {
		this.updatadate = updatadate;
	}

	public Integer[] getIds() {
		return ids;
	}

	public void setIds(Integer[] ids) {
		this.ids = ids;
	}

	public List<?> getResultList() {
		return resultList;
	}

	public void setResultList(List<?> resultList) {
		this.resultList = resultList;
	}

	public OperateResult getOperateResult() {
		return operateResult;
	}

	public void setOperateResult(OperateResult operateResult) {
		this.operateResult = operateResult;
	}

	public PageHandle getPageHandler() {
		return pageHandler;
	}

	public void setPageHandler(PageHandle pageHandler) {
		this.pageHandler = pageHandler;
	}

	public Page getPage() {
		return page;
	}

	public void setPage(Page page) {
		this.page = page;
	}

	public String getPageMethod() {
		return pageMethod;
	}

	public void setPageMethod(String pageMethod) {
		this.pageMethod = pageMethod;
	}

	public String getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(String currentPage) {
		this.currentPage = currentPage;
	}

	public List<SysFunction> getFuncList() {
		return funcList;
	}

	public void setFuncList(List<SysFunction> funcList) {
		this.funcList = funcList;
	}

	public String getCitycode() {
		return citycode;
	}

	public void setCitycode(String citycode) {
		this.citycode = citycode;
	}

	public SoftVersion getSoftVersionRecord() {
		return softVersionRecord;
	}

	public void setSoftVersionRecord(SoftVersion softVersionRecord) {
		this.softVersionRecord = softVersionRecord;
	}
}
