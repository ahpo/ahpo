package com.easygo.action.ejdb;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.easygo.service.ejdb.CityService;
import com.easygo.vo.ejdb.City;
import com.easygo.vo.ejdb.CityExample;
import com.enjoyor.util.logger.Logger;
import com.enjoyor.util.logger.LoggerFactory;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.pub.util.constant.Constants;
import com.pub.util.interceptor.SysOperLogAnnotation;
import com.pub.webapp.ui.pagination.Page;
import com.pub.webapp.ui.pagination.PageHandle;
import com.pub.webapp.ui.util.OperateResult;
import com.pub.webapp.ui.util.WebConstants;
import com.sys.service.SysRoleService;
import com.sys.service.SysUserService;
import com.sys.vo.SysFunction;

@Controller
@Scope("prototype")
public class CityAction extends ActionSupport {

	private static final long serialVersionUID = 1L;
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	private Integer id;
	private Integer cityid;
	private String cityname;
	private String citycode;
	private double citylatitdue;
	private double citylongitdue;
	private Integer isable;
	private Integer isshow;
	private Date updatadate;
	private String back;
	private String person;
	private List<SysFunction> funcList;

	private Integer ids[];
	private List<City> resultList;
	private OperateResult operateResult = new OperateResult();

	private PageHandle pageHandler;
	private Page page;
	private String pageMethod = "";
	private String currentPage;

	@Resource
	private CityService cityService;
	@Resource
	private SysUserService sysUserService;
	@Resource
	private SysRoleService sysRoleService;

	public void setSysUserService(SysUserService sysUserService) {
		this.sysUserService = sysUserService;
	}

	public void setSysRoleService(SysRoleService sysRoleService) {
		this.sysRoleService = sysRoleService;
	}

	public void setCityService(CityService cityService) {
		this.cityService = cityService;
	}

	public String cityQuery() {
		String resCode = Constants.QUERY_CITY_QUERY;
		Map<String, Object> session = ActionContext.getContext().getSession();

		String resType = (String) session.get(Constants.RES_TYPE);
		Integer urid;
		if (Constants.RES_TYPE_USER.equals(resType)) {
			urid = (Integer) session.get(Constants.UID);
			funcList = sysUserService.selectFuncByUidAndResCode(urid, resCode);
		} else {
			urid = (Integer) session.get(Constants.RID);
			funcList = sysRoleService.selectFuncByRidAndResCode(urid, resCode);
		}
		if (funcList == null || funcList.isEmpty()) {
			return LOGIN;
		}
		int total = cityService.countByExample(null);
		pageHandler = new PageHandle();
		page = pageHandler.getPage(null, currentPage, pageMethod, total);
		resultList = cityService.selectPageByExample(null, page.getStartRow(),
				page.getPageSize());
		return SUCCESS;
	}

	public String cityToUpdate() {
		City record = cityService.selectByPrimaryKey(id);
		this.cityid = record.getCityid();
		this.cityname = record.getCityname();
		this.citycode = record.getCitycode();
		this.citylatitdue = record.getCitylatitdue();
		this.citylongitdue = record.getCitylongitdue();
		this.isable = record.getIsable();
		this.isshow = record.getIsshow();
		this.updatadate = record.getUpdatadate();
		this.back = record.getBack();
		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "修改城市信息")
	public String cityUpdate() {
		Map<String, String> parms = new HashMap<String, String>();
		parms.put("currentPage", currentPage);
		operateResult.setParms(parms);
		operateResult.setOperation(WebConstants.CITY_UPDATE);
		operateResult.setUrl("cityQuery.action");
		City record = cityService.selectByPrimaryKey(id);
		record.setCityid(cityid);
		record.setCityname(cityname);
		if ("".equals(citycode.trim())) {
			citycode = null;
		}
		record.setCitycode(citycode);
		record.setCitylatitdue(citylatitdue);
		record.setCitylongitdue(citylongitdue);
		record.setIsable(isable);
		record.setIsshow(isshow);
		record.setUpdatadate(new Date());
		if (back == null || "".equals(back.trim())) {
			back = null;
		}
		record.setBack(back);

		CityExample example = new CityExample();
		example.createCriteria().andCityidEqualTo(cityid);
		if (!cityService.checkSimilarity(example, id, 0)) {
			logger.info("cannot update, for the inputed cityid is already exist");
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult
					.setReason(WebConstants.OPERATERESULT_REASON_CITY_UPDATE);
			return ERROR;
		}
		example.clear();
		example.createCriteria().andCitynameEqualTo(cityname.trim());
		if (!cityService.checkSimilarity(example, id, 0)) {
			logger.info("cannot update, for the inputed cityname is already exist");
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult
					.setReason(WebConstants.OPERATERESULT_REASON_CITY_UPDATE);
			return ERROR;
		}

		int rtn = cityService.updateByPrimaryKey(record);
		if (rtn != 1) {
			logger.info("cannot update, unknow reason");
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult
					.setReason(WebConstants.OPERATERESULT_REASON_CITY_UPDATE);
			return ERROR;
		}

		logger.info("city[" + id + "] is updated successfully");
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
		return SUCCESS;
	}

	public String cityToCreate() {
		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "创建城市信息")
	public String cityCreate() {
		operateResult.setOperation(WebConstants.CITY_CREATE);
		operateResult.setUrl("cityQuery.action");
		City record = new City();
		record.setCityid(cityid);
		record.setCityname(cityname);
		if ("".equals(citycode.trim())) {
			citycode = null;
		}
		record.setCitycode(citycode);
		record.setCitylatitdue(citylatitdue);
		record.setCitylongitdue(citylongitdue);
		record.setIsable(isable);
		record.setIsshow(isshow);
		record.setUpdatadate(new Date());
		person = (String) ActionContext.getContext().getSession()
				.get(Constants.USER_NAME);
		record.setPerson(person);
		if (back == null || "".equals(back.trim())) {
			back = null;
		}
		record.setBack(back);

		CityExample example = new CityExample();
		example.createCriteria().andCityidEqualTo(cityid);
		if (!cityService.checkSimilarity(example, id, 1)) {
			logger.info("cannot create, for the inputed cityid is already exist");
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult
					.setReason(WebConstants.OPERATERESULT_REASON_CITY_CREATE);
			return ERROR;
		}
		example.clear();
		example.createCriteria().andCitynameEqualTo(cityname.trim());
		if (!cityService.checkSimilarity(example, id, 1)) {
			logger.info("cannot create, for the inputed cityname is already exist");
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult
					.setReason(WebConstants.OPERATERESULT_REASON_CITY_CREATE);
			return ERROR;
		}

		int rtn = cityService.insertSelective(record);
		if (rtn != 1) {
			logger.info("cannot create, unknow reason");
			operateResult.setResult(WebConstants.OPERATE_RESULT_FAIL);
			operateResult
					.setReason(WebConstants.OPERATERESULT_REASON_CITY_CREATE);
			return ERROR;
		}

		logger.info("city is created successfully");
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
		return SUCCESS;
	}

	@SysOperLogAnnotation(value = "删除城市信息")
	public String cityDelete() {
		operateResult.setOperation(WebConstants.CITY_DELETE);
		operateResult.setUrl("cityQuery.action");
		for (int i = 0; i < ids.length; i++) {
			cityService.deleteByPrimaryKey(ids[i]);
			logger.info("city[" + ids[i] + "] is deleted");
		}
		operateResult.setResult(WebConstants.OPERATE_RESULT_SUCCESS);
		return SUCCESS;
	}

	public Integer[] getIds() {
		return ids;
	}

	public void setIds(Integer[] ids) {
		this.ids = ids;
	}

	public List<City> getResultList() {
		return resultList;
	}

	public void setResultList(List<City> resultList) {
		this.resultList = resultList;
	}

	public OperateResult getOperateResult() {
		return operateResult;
	}

	public void setOperateResult(OperateResult operateResult) {
		this.operateResult = operateResult;
	}

	public PageHandle getPageHandler() {
		return pageHandler;
	}

	public void setPageHandler(PageHandle pageHandler) {
		this.pageHandler = pageHandler;
	}

	public Page getPage() {
		return page;
	}

	public void setPage(Page page) {
		this.page = page;
	}

	public String getPageMethod() {
		return pageMethod;
	}

	public void setPageMethod(String pageMethod) {
		this.pageMethod = pageMethod;
	}

	public String getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(String currentPage) {
		this.currentPage = currentPage;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Integer getCityid() {
		return cityid;
	}

	public void setCityid(Integer cityid) {
		this.cityid = cityid;
	}

	public String getCityname() {
		return cityname;
	}

	public void setCityname(String cityname) {
		this.cityname = cityname;
	}

	public String getCitycode() {
		return citycode;
	}

	public void setCitycode(String citycode) {
		this.citycode = citycode;
	}

	public double getCitylatitdue() {
		return citylatitdue;
	}

	public void setCitylatitdue(double citylatitdue) {
		this.citylatitdue = citylatitdue;
	}

	public double getCitylongitdue() {
		return citylongitdue;
	}

	public void setCitylongitdue(double citylongitdue) {
		this.citylongitdue = citylongitdue;
	}

	public Integer getIsable() {
		return isable;
	}

	public void setIsable(Integer isable) {
		this.isable = isable;
	}

	public Integer getIsshow() {
		return isshow;
	}

	public void setIsshow(Integer isshow) {
		this.isshow = isshow;
	}

	public Date getUpdatadate() {
		return updatadate;
	}

	public void setUpdatadate(Date updatadate) {
		this.updatadate = updatadate;
	}

	public String getBack() {
		return back;
	}

	public void setBack(String back) {
		this.back = back;
	}

	public String getPerson() {
		return person;
	}

	public void setPerson(String person) {
		this.person = person;
	}

	public List<SysFunction> getFuncList() {
		return funcList;
	}

	public void setFuncList(List<SysFunction> funcList) {
		this.funcList = funcList;
	}
}
