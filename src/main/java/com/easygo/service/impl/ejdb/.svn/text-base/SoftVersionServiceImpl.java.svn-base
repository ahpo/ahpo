package com.easygo.service.impl.ejdb;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.easygo.dao.ejdb.SoftVersionMapper;
import com.easygo.service.ejdb.SoftVersionService;
import com.easygo.vo.ejdb.SoftVersion;
import com.easygo.vo.ejdb.SoftVersionExample;
import com.pub.service.impl.ServiceImpl;

@Service("softVersionService")
public class SoftVersionServiceImpl extends ServiceImpl implements
		SoftVersionService {

	@Resource
	private SoftVersionMapper softVersionMapper;

	public SoftVersionMapper getSoftVersionMapper() {
		return softVersionMapper;
	}

	public void setSoftVersionMapper(SoftVersionMapper softVersionMapper) {
		this.softVersionMapper = softVersionMapper;
	}

	public int countByExample(SoftVersionExample example) {
		logger.info("get count of softVersion by example...");
		return softVersionMapper.countByExample(example);
	}

	public int deleteByPrimaryKey(Integer id) {
		logger.info("delete record from softVersion by primarykey[" + id
				+ "]...");
		return softVersionMapper.deleteByPrimaryKey(id);
	}

	public int insertSelective(SoftVersion record) {
		logger.info("insert record into softVersion...");
		return softVersionMapper.insertSelective(record);
	}

	public List<SoftVersion> selectByExampleWithBLOBs(SoftVersionExample example) {
		logger.info("select records with BLOBs from softVersion by Example...");
		return softVersionMapper.selectByExampleWithBLOBs(example);
	}

	public List<SoftVersion> selectPageByExampleWithBLOBs(
			SoftVersionExample example, int offset, int pageSize) {
		logger.info("select page info from softVersion by example...");
		return softVersionMapper.selectPageByExampleWithBLOBs(example, offset,
				pageSize);
	}

	public SoftVersion selectByPrimaryKey(Integer id) {
		logger.info("select record from softVersion by primarykey[" + id
				+ "]...");
		return softVersionMapper.selectByPrimaryKey(id);
	}

	public int updateByPrimaryKeyWithBLOBs(SoftVersion record) {
		logger.info("update softVersionWithBLOBs by primarykey["
				+ record.getId() + "]...");
		return softVersionMapper.updateByPrimaryKeyWithBLOBs(record);
	}

	/**
	 * 相似性记录检�?
	 * 
	 * @param example
	 * @param id
	 *            softversion的id
	 * @param flag
	 *            表示符号 0:修改; 1:插入
	 * @return true:不存在相似的记录; false:存在相似记录
	 */
	public boolean checkSimilarity(SoftVersionExample example, Integer id,
			int flag) {
		List<SoftVersion> list = softVersionMapper
				.selectByExampleWithBLOBs(example);
		if (list == null || list.size() < 1) {
			return true;
		}

		if (flag == 0) { // update
			if (list.size() == 1 && list.get(0).getId().equals(id)) {
				return true;
			}
		}

		return false;
	}
}
