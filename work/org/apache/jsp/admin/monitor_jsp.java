/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.19
 * Generated at: 2013-02-16 12:19:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.pub.util.monitor.WindowsInfoUtil;
import com.pub.util.monitor.DiskInfo;
import java.util.*;

public final class monitor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"pageContent sortDrag\" selector=\"h1\" layoutH=\"42\">\r\n");
      out.write("\r\n");
      out.write("            ");

            long[] mem = WindowsInfoUtil.getMemery();
            long[] cpu = WindowsInfoUtil.getCpuRatioForWindows();
            List<DiskInfo> list = WindowsInfoUtil.getDisk();
            String dataStrUse="";
            String dataStrUnUse="";
            String lableStr="";
            for(DiskInfo d:list) {
            	dataStrUse+=d.getPercent()+",";
            	dataStrUnUse+=(100-d.getPercent())+",";
            	lableStr+="[\""+d.getName()+"\"]"+",";
            }
            dataStrUse = dataStrUse.substring(0,dataStrUse.length()-1);
            dataStrUnUse = dataStrUnUse.substring(0,dataStrUnUse.length()-1);
            lableStr = lableStr.substring(0,lableStr.length()-1);
            
            
            
            
      out.write("\r\n");
      out.write("                <script type=\"text/javascript\" charset=\"utf-8\">\r\n");
      out.write("                /* Title settings */        \r\n");
      out.write("                title = \"内存使用率（");
      out.print(mem[0]+mem[1]);
      out.write("M）\";\r\n");
      out.write("                titleXpos = 130;\r\n");
      out.write("                titleYpos = 35;\r\n");
      out.write("                \r\n");
      out.write("                /* Pie Data */\r\n");
      out.write("                pieRadius = 80;\r\n");
      out.write("                pieXpos = 100;\r\n");
      out.write("                pieYpos = 130;\r\n");
      out.write("                pieData = [");
      out.print(mem[0]);
      out.write(',');
      out.write(' ');
      out.print(mem[1]);
      out.write("];\r\n");
      out.write("                pieLegend = [\r\n");
      out.write("                \"%%.%% – 已用");
      out.print(mem[0]);
      out.write("M\", \r\n");
      out.write("                \"%%.%% – 空闲");
      out.print(mem[1]);
      out.write("M\"];\r\n");
      out.write("                \r\n");
      out.write("                pieLegendPos = \"south\";\r\n");
      out.write("                \r\n");
      out.write("                $(function () {\r\n");
      out.write("                    var r = Raphael(\"chartHolderMem\");\r\n");
      out.write("                     \r\n");
      out.write("                    r.text(titleXpos, titleYpos, title).attr({\"font-size\": 20});\r\n");
      out.write("                    \r\n");
      out.write("                    var pie = r.piechart(pieXpos, pieYpos, pieRadius, pieData, {legend: pieLegend, legendpos: pieLegendPos});\r\n");
      out.write("                    pie.hover(function () {\r\n");
      out.write("                        this.sector.stop();\r\n");
      out.write("                        this.sector.scale(1.1, 1.1, this.cx, this.cy);\r\n");
      out.write("                        if (this.label) {\r\n");
      out.write("                            this.label[0].stop();\r\n");
      out.write("                            this.label[0].attr({ r: 7.5 });\r\n");
      out.write("                            this.label[1].attr({\"font-weight\": 800});\r\n");
      out.write("                        }\r\n");
      out.write("                    }, function () {\r\n");
      out.write("                        this.sector.animate({ transform: 's1 1 ' + this.cx + ' ' + this.cy }, 500, \"bounce\");\r\n");
      out.write("                        if (this.label) {\r\n");
      out.write("                            this.label[0].animate({ r: 5 }, 500, \"bounce\");\r\n");
      out.write("                            this.label[1].attr({\"font-weight\": 400});\r\n");
      out.write("                        }\r\n");
      out.write("                    });\r\n");
      out.write("                    \r\n");
      out.write("                });\r\n");
      out.write("                </script>\r\n");
      out.write("                <span id=\"chartHolderMem\"></span>\r\n");
      out.write("            <script type=\"text/javascript\" charset=\"utf-8\">\r\n");
      out.write("                /* Title settings */        \r\n");
      out.write("                title = \"CPU使用率\";\r\n");
      out.write("                titleXpos = 130;\r\n");
      out.write("                titleYpos = 35;\r\n");
      out.write("                \r\n");
      out.write("                /* Pie Data */\r\n");
      out.write("                pieRadius = 80;\r\n");
      out.write("                pieXpos = 100;\r\n");
      out.write("                pieYpos = 130;\r\n");
      out.write("                pieData = [");
      out.print(cpu[0]);
      out.write(',');
      out.write(' ');
      out.print(cpu[1]);
      out.write("];\r\n");
      out.write("                pieLegend = [\r\n");
      out.write("                \"%%.%% – 使用中\", \r\n");
      out.write("                \"%%.%% – 空闲中\"];\r\n");
      out.write("                \r\n");
      out.write("                pieLegendPos = \"south\";\r\n");
      out.write("                \r\n");
      out.write("                $(function () {\r\n");
      out.write("                    var r = Raphael(\"chartHolderCpu\");\r\n");
      out.write("                     \r\n");
      out.write("                    r.text(titleXpos, titleYpos, title).attr({\"font-size\": 20});\r\n");
      out.write("                    \r\n");
      out.write("                    var pie = r.piechart(pieXpos, pieYpos, pieRadius, pieData, {legend: pieLegend, legendpos: pieLegendPos});\r\n");
      out.write("                    pie.hover(function () {\r\n");
      out.write("                        this.sector.stop();\r\n");
      out.write("                        this.sector.scale(1.1, 1.1, this.cx, this.cy);\r\n");
      out.write("                        if (this.label) {\r\n");
      out.write("                            this.label[0].stop();\r\n");
      out.write("                            this.label[0].attr({ r: 7.5 });\r\n");
      out.write("                            this.label[1].attr({\"font-weight\": 800});\r\n");
      out.write("                        }\r\n");
      out.write("                    }, function () {\r\n");
      out.write("                        this.sector.animate({ transform: 's1 1 ' + this.cx + ' ' + this.cy }, 500, \"bounce\");\r\n");
      out.write("                        if (this.label) {\r\n");
      out.write("                            this.label[0].animate({ r: 5 }, 500, \"bounce\");\r\n");
      out.write("                            this.label[1].attr({\"font-weight\": 400});\r\n");
      out.write("                        }\r\n");
      out.write("                    });\r\n");
      out.write("                    \r\n");
      out.write("                });\r\n");
      out.write("                </script>\r\n");
      out.write("                \r\n");
      out.write("                <span id=\"chartHolderCpu\"></span>\r\n");
      out.write("\t<div class=\"panel collapse\" minH=\"100\" defH=\"360\">\r\n");
      out.write("        <h1>硬盘资源情况</h1>\r\n");
      out.write("        <div>\r\n");
      out.write("            <script type=\"text/javascript\">\r\n");
      out.write("\t\t    var options = {\r\n");
      out.write("\t\t        stacked: false,\r\n");
      out.write("\t\t        gutter:20,\r\n");
      out.write("\t\t        axis: \"0 0 1 1\", // Where to put the labels (trbl)\r\n");
      out.write("\t\t        axisystep: 10 // How many x interval labels to render (axisystep does the same for the y axis)\r\n");
      out.write("\t\t    };\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    $(function() {\r\n");
      out.write("\t\t        // Creates canvas\r\n");
      out.write("\t\t        var r = Raphael(\"chartHolder\");\r\n");
      out.write("\t\t        var data = [[");
      out.print(dataStrUse);
      out.write(']');
      out.write(',');
      out.write('[');
      out.print(dataStrUnUse);
      out.write("]]\r\n");
      out.write("\t\t        \t\t        \r\n");
      out.write("\t\t        // stacked: true\r\n");
      out.write("\t\t        options.stacked=true;\r\n");
      out.write("\t\t        \r\n");
      out.write("\t\t        var chart2 = r.barchart(80, 10, 320, 220, data, options).hoverColumn(function() {\r\n");
      out.write("\t\t            var y = [], res = [];\r\n");
      out.write("\t\t            for (var i = this.bars.length; i--;) {\r\n");
      out.write("\t\t                y.push(this.bars[i].y);\r\n");
      out.write("\t\t                res.push(this.bars[i].value || \"0\");\r\n");
      out.write("\t\t            }\r\n");
      out.write("\t\t            this.flag = r.popup(this.bars[0].x, Math.min.apply(Math, y), res.join(\", \")).insertBefore(this);\r\n");
      out.write("\t\t        }, function() {\r\n");
      out.write("\t\t            this.flag.animate({opacity: 0}, 500, \">\", function () {this.remove();});\r\n");
      out.write("\t\t        });\r\n");
      out.write("\t\t        chart2.label([");
      out.print(lableStr);
      out.write("],true);\r\n");
      out.write("\t\t    });\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div id=\"chartHolder\"></div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
